##################################################
#  8820 Introduction to Bayesian Statistics
#   Homework 2 codes
#   Shirong Zhao
#################################################
rm(list = ls(all=TRUE))
#################### Problem 2 ####################
mu1<--1
sigma1<-1
mu2<-1
sigma2<-sqrt(3)
#
# Hence Y is N(1,4)
#
###### Question (b)
M=100000
X1<-rnorm(M, mean= mu1, sd=sigma1)
X2<-rnorm(M, mean=mu2, sd=sigma2)
Y<-X1+X2
tmp = seq(-8, 8, by = 0.01)
ptmp = dnorm(tmp, mean=0, sd=2)
# plot the Monte Carlo Sampling 
hist(Y, prob = TRUE, xlab = 'Y', ylab = 'p(Y)', main = "Density of Y in 2(b)")
lines(density(Y), col=1, lty = 1, lwd = 1)
lines(tmp, ptmp, col = 2, lty = 2, lwd = 2)
legend("topright",legend=c("Simulation (b)", "True "), col=c(1, 2 ), lty=1:2)
###### Question (c)
n<-length(tmp)
Y.density<-vector("numeric", length = n)
M1<-10000
for (i in 1:n) {
  X2b<-rnorm(M1, mean=mu2, sd=sigma2)
  Y.density[i]<-mean(dnorm(tmp[i]-X2b, mean=mu1, sd=sigma1))
}
# plot the Monte Carlo Sampling 
hist(Y, prob = TRUE, xlab = 'Y', ylab = 'p(Y)', main = "Density of Y in 2(c)")
lines(density(Y), col=1,lty = 1, lwd = 1)
lines(tmp, ptmp, col = 2, lty = 2, lwd = 2)
lines(tmp, Y.density, col=3, lty = 3, lwd = 3)
legend("topright",legend=c("Simulation (b)", "True", "Simulation (c)"), col=1:3, lty=1:3, lwd = 1:3)
###### Question (d)
alpha1<-1
beta1<-3
alpha2<-2
beta2<-4
#
M=100000
X1<-rgamma(M, shape = alpha1, rate=beta1)
X2<-rgamma(M, shape = alpha2, rate=beta2)
Y<-X1+X2
#
tmp = seq(0, 10, by = 0.01)
n<-length(tmp)
Y.density<-vector("numeric", length = n)
M1<-10000
for (i in 1:n) {
  X2b<-rgamma(M1, shape = alpha2, rate=beta2)
  Y.density[i]<-mean(dgamma(tmp[i]-X2b, shape = alpha1, rate=beta1))
}
# plot the Monte Carlo Sampling
hist(Y, prob = TRUE, xlab = 'Y', ylab = 'p(Y)', main = "Density of Y in 2(d)")
lines(density(Y), col=2,lty = 2, lwd = 2)
lines(tmp, Y.density, col=3, lty = 3, lwd = 3)
legend("topright",legend=c("Simulation (b)", "Simulation (c)"), col=2:3, lty=2:3, lwd = 2:3)
#################### Problem 3 ####################
rm(list = ls(all=TRUE))
###### Question (b)
craps<-function(){
  x1<-sample(1:6,1)
  x2<-sample(1:6,1)
  x=x1+x2
  if (x==7 | x==11){
    i=1
    y=x
  } else if (x==2 | x==3 |x==12) {
    i=0
    y=x
  } else{
    y1<-sample(1:6,1)
    y2<-sample(1:6,1)
    y=y1+y2
    if (y==7){
      i=0
    }else if(y==x) {
      i=1
    } else{    
      while(y!=x & y!=7){
      y1<-sample(1:6,1)
      y2<-sample(1:6,1)
      y=y1+y2
      if (y==7){
        i=0
      }else if(y==x) {
        i=1
      }
    }
   }
  }
  z<-c(x,y,i)
  return(z)
}
craps()
#
M=10000
outcome<-rep(-99, length = M)
for (i in 1:M) {
 outcome[i]<- craps()[3]
}
mean(outcome) # should be close to 0.492929
#
doubledown<-function(){
  wli<-rep(-99, length=10)
  wl<-rep(-99, length=10)
  wli[1]<-craps()[3]
  ifelse(wli[1]==0, wl[1]<--10, wl[1]<-10 )
  for (i in 2:10){
    wli[i]<-craps()[3]
    if (wli[i]==1 & wli[i-1]==1){
      wl[i]=10
    } else if (wli[i]==1 & wli[i-1]==0){
      wl[i]=-2*wl[i-1]
    } else if (wli[i]==0 & wli[i-1]==1){
      wl[i]=-10
    } else {
      wl[i]=2*wl[i-1]
    }
  }
  return(wl)
}
doubledown()
N=100000
mu<-rep(-99, length=N)
for (i in 1:N) {
  mu[i] <- mean(doubledown())
}
#
hist(mu, prob = TRUE, xlab = 'expected winnings ', ylab = 'density', main = "Density of expected earnings in 3(b)")
lines(density(mu), col=1, lty = 1, lwd = 1)
#
mean(mu)
min(mu)
max(mu)
#################### Problem 4 ####################
rm(list = ls(all=TRUE))
###### Question (c)
#
n1<-5
n2<-11
n3<-6
n4<-7
PA<-3^(-n1)*3^(-n2)*6^(-n3)*6^(-n4)
PB<-6^(-n1)*3^(-n2)*3^(-n3)*6^(-n4)
PC<-6^(-n1)*6^(-n2)*6^(-n3)*2^(-n4)
LR0<-PC/max(PA,PB,PC) 
#
M=100000
LR<-rep(-99,M)
for (j in 1:M) {
  x<-rep(-99, 29)
  for (i in 1:29){
    x[i]<-sample(c(1,2,3,4,4,4),1)
  }
  n1<-length(which(x==1))
  n2<-length(which(x==2))
  n3<-length(which(x==3))
  n4<-length(which(x==4))
  #
  PA<-3^(-n1)*3^(-n2)*6^(-n3)*6^(-n4)
  PB<-6^(-n1)*3^(-n2)*3^(-n3)*6^(-n4)
  PC<-6^(-n1)*6^(-n2)*6^(-n3)*2^(-n4)
  LR[j]<-PC/max(PA,PB,PC) 
}
# calculate p-value
pvalue<-length(which(LR<=LR0))/M
pvalue































